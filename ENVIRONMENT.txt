API KEYS AND TOKENS VIA ENVIRONMENT VARIABLES
==========================

* Setup Secure ENV Variables for API Tokens/Access Keys
  # config/application.rb
    Bundler.require(*Rails.groups)

    Dotenv::Railtie.load
    # HOSTNAME = ENV['HOSTNAME']
    GITHUB_ACCESS_TOKEN = ENV['GITHUB_ACCESS_TOKEN']
    GOOGLE_API_KEY = ENV['GOOGLE_API_KEY']

  # .env
    $ touch .env
    > GITHUB_ACCESS_TOKEN=0279d6d493c5b49dd37bb6f44a82c32caeb87b1e
    > GOOGLE_API_KEY=AIzaSyCCXu8hqupAesvGPQh2ebeb2MnjU_lbAgY

  # .gitignore
    $ touch .gitignore
    > add '.env' to list

  # Verify (via terminal)
    $ env #=> shows all environments in computer.
    $ echo $HOME #=> /Users/Adam
    $ echo $USER #=> Adam
    $ echo $GITHUB_ACCESS_TOKEN

  # Verify (via rails c)
    > ENV["HOME"]  #=> "/Users/Adam"
    > ENV["USER"] #=> "Adam"
    > ENV['GITHUB_ACCESS_TOKEN']
    > ENV['GOOGLE_API_KEY']




==============================================
== DBC DOCS ABOUT SETTING UP ENV IN SINATRA ==

Release 0: Environment Variables in Ruby Processes

via terminal
$ env #=> shows all environments in computer.
$ echo $HOME #=> /Users/Adam
$ echo $USER #=> Adam

$ irb (via irb as a hash)
> ENV["HOME"]  #=> "/Users/Adam"
> ENV["USER"] #=> "Adam"

ENV[GITHUB_ACCESS_TOKEN]
ENV[GOOGLE_API_KEY]

GITHUB_ACCESS_TOKEN=0279d6d493c5b49dd37bb6f44a82c32caeb87b1e
GOOGLE_API_KEY=AIzaSyCCXu8hqupAesvGPQh2ebeb2MnjU_lbAgY


Release 1: The Need for a GitHub Access Token
The runner.rb script makes use of the Octokit gem to interact with the GitHub API.
https://github.com/octokit/octokit.rb

$ bundle install
$ be ruby runner.rb
The client made a GET request to https://api.github.com/user. What was the response code? 401, noting that making the request requires authentication.

ENV["GITHUB_ACCESS_TOKEN"]
Need to have our access token stored in the GITHUB_ACCESS_TOKEN environment variable. Right now, that value is nil, which is why our request fails.

Release 2: Get an Access Token
Sign into GitHub and generate a new access token: https://github.com/settings/tokens/new
Limit scope to user, then copy token.

Release 3: Make the Token Available to Ruby (only available for one time of running script)
assign environment variables when running our script all in one line:
$ GITHUB_ACCESS_TOKEN=0279d6d493c5b49dd37bb6f44a82c32caeb87b1e ruby runner.rb (mine)
Your GitHub username is 4rlm.
You have 1 followers on GitHub.
You are following 1 users.
Variable is not stored in the shell, so we have to declare the token every time that we run the script.

Release 4: Make the Token an Environment Variable in the Shell (only available in this shell)
To make it an environment variable, we export it:
$ export GITHUB_ACCESS_TOKEN=0279d6d493c5b49dd37bb6f44a82c32caeb87b1e
$ bundle exec ruby runner.rb
Unfortunately, this environment variable is only set for this one shell.

* NOTE: If we want to make an environment variable available every time we use the terminal, we can set configuration details in files like ~/.bash_profile.

Release 5: Setting Environment Variables in Ruby with Dotenv (designed for 12 factor app [https://12factor.net/])
The Dotenv gem allows us to store several tokens at once.
https://github.com/bkeepers/dotenv
$ gem install dotenv

This gem provides an executable that we can use when running an application. It runs first, reading the contents of a .env file if it finds one in your program's directory.

In the .env file, we can declare each of our environment variables on a separate line:

GITHUB_ACCESS_TOKEN=0279d6d493c5b49dd37bb6f44a82c32caeb87b1e
OTHER_TOKEN=ed872ca4df47129a8be1cb149f5d08e64d1a2si5
OTHER_SECRET=ue983ca0df47129a8be1cb149f5d08e64d1i6xz8
When dotenv runs, it picks up the variables in that file and makes them environment variables for the duration of your program.

Create a .env file and add our GitHub access token to it. Then use Dotenv's executable to run our script:

$ touch .env
$ gem install dotenv
> open file, then add above GH token.
$ dotenv bundle exec ruby runner.rb (don't use 'be' for 'bundle exec')
Your GitHub username is 4rlm.
You have 1 followers on GitHub.
You are following 1 users.

** If we're going to create a .env file, it's critical that we tell git to ignore it. To do this, our repo already contains a .gitignore file that tells git to ignore any files named .env, but normally you will need to do that yourself.

What about Teams?
What about Production?

https://devcenter.heroku.com/articles/config-vars
Heroku provides tools via its web interface and command-line toolchain to set environment variables on your Heroku server (they call it a dyno). When you set environment variables on your server they'll stay there until you change them, no need to reset them with every deploy.
